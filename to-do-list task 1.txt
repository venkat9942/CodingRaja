
import pickle
import datetime

class Task:
    def __init__(self, description, priority, due_date, completed=False):
        self.description = description
        self.priority = priority
        self.due_date = due_date
        self.completed = completed

    def __repr__(self):
        status = "Done" if self.completed else "Pending"
        return f"[{self.priority}] {self.description} (Due: {self.due_date}) - {status}"

class TaskManager:
    def __init__(self, filename):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        try:
            with open(self.filename, 'rb') as f:
                tasks = pickle.load(f)
        except FileNotFoundError:
            tasks = []
        return tasks

    def save_tasks(self):
        with open(self.filename, 'wb') as f:
            pickle.dump(self.tasks, f)

    def add_task(self, task):
        self.tasks.append(task)
        self.save_tasks()

    def remove_task(self, task_index):
        if 0 <= task_index < len(self.tasks):
            del self.tasks[task_index]
            self.save_tasks()

    def complete_task(self, task_index):
        if 0 <= task_index < len(self.tasks):
            self.tasks[task_index].completed = True
            self.save_tasks()

    def list_tasks(self):
        if not self.tasks:
            print("No tasks in the to-do list.")
        for index, task in enumerate(self.tasks):
            print(f"{index + 1}. {task}")

    def clear_tasks(self):
        self.tasks = []
        self.save_tasks()

def main():
    filename = "tasks.pkl"  # Pickle file to store tasks
    task_manager = TaskManager(filename)

    while True:
        print("To-Do List Manager")
        print("1. Add Task")
        print("2. Remove Task")
        print("3. Mark Task as Completed")
        print("4. List Tasks")
        print("5. Clear All Tasks")
        print("6. Exit")

        choice = input("Enter your choice: ")

        if choice == '1':
            description = input("Enter task description: ")
            priority = input("Enter priority (high/medium/low): ")
            due_date = input("Enter due date (YYYY-MM-DD): ")
            try:
                due_date = datetime.datetime.strptime(due_date, '%Y-%m-%d').date()
                new_task = Task(description, priority, due_date)
                task_manager.add_task(new_task)
                print("Task added successfully.")
            except ValueError:
                print("Invalid date format. Please enter the date in YYYY-MM-DD format.")

        elif choice == '2':
            task_index = int(input("Enter task number to remove: ")) - 1
            if 0 <= task_index < len(task_manager.tasks):
                task_manager.remove_task(task_index)
                print("Task has been removed.")
            else:
                print("Invalid task number.")

        elif choice == '3':
            task_index = int(input("Enter task number to mark as completed: ")) - 1
            if 0 <= task_index < len(task_manager.tasks):
                task_manager.complete_task(task_index)
                print("Task marked as completed.")
            else:
                print("Invalid task number.")

        elif choice == '4':
            task_manager.list_tasks()

        elif choice == '5':
            confirm = input("Are you sure you want to clear all tasks? (yes/no): ")
            if confirm.lower() == 'yes':
                task_manager.clear_tasks()
                print("All tasks cleared.")

        elif choice == '6':
            print("Exiting program")
            break

        else:
            print("Invalid choice. Please enter a number from 1 to 6.")

if __name__ == "__main__":
    main()
